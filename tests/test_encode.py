"""Test the module used for encoding."""
import pytest
import numpy as np

from src.backend import encode, util


@pytest.fixture()
def image_arr():
    """Return array of the test png file."""
    # TODO: Figure out how to read files in GitLab CI/CD
    return np.array(
        [
            [45, 0, 0],
            [0, 0, 0],
            [0, 23, 0],
            [123, 0, 0],
            [0, 7, 0],
            [87, 0, 0],
            [0, 9, 204],
            [68, 0, 0],
            [0, 44, 0],
            [11, 0, 205],
            [8, 0, 0],
            [0, 147, 115],
            [66, 56, 0],
            [46, 0, 0],
            [0, 1, 0],
            [0, 123, 0],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 51, 255],
            [0, 51, 255],
            [0, 0, 0],
            [165, 0, 0],
            [0, 51, 255],
            [0, 51, 255],
            [0, 0, 0],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 0, 0],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 51, 255],
            [0, 51, 255],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 0, 0],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 0, 0],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 0, 0],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 0, 0],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 0, 0],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 51, 255],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 0, 0],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 0, 0],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 51, 255],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
        ],
        dtype=np.uint8,
    )


@pytest.mark.parametrize(
    "text",
    [
        "",
        "123",
        "abc",
        "1a*",
        "1 a",
        " 1a ",
        ".",
        "qwertyasdf...",
        "\\\\\\",
        "~!@#$%$^&*(*)+",
        "abc123/-*" * 500,
    ],
)
def test_str_into_bin_array(text) -> None:
    result = util.str_to_binary(text)

    arr = encode.str_into_bin_array(text)
    data = "".join(
        (format(i, "b").zfill(8)[-1] for i, _ in zip(arr.flatten(), range(len(result))))
    )

    assert data == result


@pytest.mark.parametrize(
    "text",
    [
        "",
        "123",
        "abc",
        "1a*",
        "1 a",
        " 1a ",
        ".",
        "qwertyasdf... ",
        "\\\\\\",
        "~!@#$%$^&*(*)+",
        "a4" * 30,
    ],
)
def test_encode_message(image_arr, text) -> None:
    new_arr = encode.encode_message(image_arr, text)
    extracted_text = ""
    for rgb_vals, _ in zip(new_arr.reshape(-1, 8), range(len(text))):
        binary = (bin(num)[-1] for num in rgb_vals)
        extracted_text += util.binary_to_char("".join(binary))

    assert text == extracted_text


def test_encode_limit(image_arr) -> None:
    with pytest.raises(ValueError):
        encode.encode_message(image_arr, "'extremely long text'" * 5000)
